@page "/cursos"

@inject IToastService toastService
@inject HttpClient http
@inject IJSRuntime js

<AuthorizeView Context="authContext" Roles="@("Administrador")">
    <Authorized>
        <BreadCrumb breadCrumbs="breadCrumbs"></BreadCrumb>
        <div class="container-fluid">
            <div class="row">
                <div class="col-12 col-md-8 col-lg-6">
                    <SfCard ID="Cursos">
                        <CardHeader Title="Cursos" />
                        <CardContent>
                            <SpinLoader IsLoading="@(cursos == null)">
                                <LoadingTemplate>
                                    <div class="modal-overlay">
                                        <Chase Color="#ff0000" Size="60px" Center="true" />
                                    </div>
                                </LoadingTemplate>
                                <ContentTemplate>
                                    @if (cursos.Count == 0)
                                    {
                                        <text>Não foram encontrados registos na base de dados</text>
                                    }
                                    else
                                    {
                                        <SfButton OnClick="ExcelExport" IconCss="e-icons e-export_excel" IconPosition="IconPosition.Left" Content="Excel"></SfButton>
                                        <br />
                                        <br />
                                        <SfGrid @ref="CursosGrid" DataSource="@cursos" AllowExcelExport="true" AllowPaging="true"
                                                Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update", "Search" })">
                                            <GridPageSettings PageSize="25"></GridPageSettings>
                                            <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Normal"
                                                              ShowDeleteConfirmDialog="true">
                                                @*<Template>
                                                        @{
                                                            var curso = (context as Curso);
                                                            <div>
                                                                <div class="form-row">
                                                                    <div class="form-group col-md-9">
                                                                        <label class="e-float-text e-label-top">Freight</label>
                                                                        <SfTextBox ID="Freight" @bind-Value="@(curso.Designacao)" TValue="double?"></SfTextBox>
                                                                    </div>
                                                                    <div class="form-group col-md-3">
                                                                        <label class="e-float-text e-label-top">Order Date</label>
                                                                        <SfNumericTextBox ID="OrderDate" @bind-Value="@(curso.Validade)"></SfNumericTextBox>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        }
                                                    </Template>*@
                                            </GridEditSettings>
                                            <GridEvents OnActionBegin="ActionBeginHandler" OnActionComplete="ActionCompleteHandler" TValue="Curso"></GridEvents>
                                            <GridColumns>
                                                <GridColumn Field="CursoID" HeaderText="ID" IsPrimaryKey="true" IsIdentity="true" Visible="false"></GridColumn>
                                                <GridColumn Field="Designacao" HeaderText="Curso"></GridColumn>
                                                <GridColumn Field="Validade" HeaderText="Validade"></GridColumn>
                                            </GridColumns>
                                        </SfGrid>

                                    }
                                </ContentTemplate>
                                <FaultedContentTemplate>
                                    <text>ERRO! Por favor contacte o administrador do sistema!</text>
                                </FaultedContentTemplate>
                            </SpinLoader>
                        </CardContent>
                        <CardFooter>
                            <CardFooterContent>

                            </CardFooterContent>
                        </CardFooter>
                    </SfCard>
                </div>
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <p>Não está logado.</p>
    </NotAuthorized>
</AuthorizeView>

<style>
    .e-export_excel:before {
        content: '\e74e';
    }
</style>

@code {
    public List<BreadCrumbData> breadCrumbs = new List<BreadCrumbData>();
    private SfGrid<Curso> CursosGrid;
    List<Curso> cursos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        BreadCrumbData breadCrumb = new BreadCrumbData
        {
            Text = "Início",
            Url = "/"
        };
        breadCrumbs.Add(breadCrumb);

        breadCrumb = new BreadCrumbData
        {
            Text = "Tabelas",
            Url = "/cursos"
        };
        breadCrumbs.Add(breadCrumb);

        breadCrumb = new BreadCrumbData
        {
            Text = "Cursos",
            Url = "/cursos"
        };
        breadCrumbs.Add(breadCrumb);

        cursos = await http.GetFromJsonAsync<List<Curso>>("api/curso");
    }

    public async Task ActionBeginHandler(ActionEventArgs<Curso> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (Args.Action == "Add")
            {
                await http.PostAsJsonAsync("api/curso", Args.Data);
                toastService.ShowSuccess("Curso adicionado com sucesso", "Sucesso!");
            }
            else
            {
                await http.PutAsJsonAsync("api/curso", Args.Data);
                toastService.ShowSuccess("Curso editado com sucesso", "Sucesso!");
            }
        }
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await http.DeleteAsync($"api/curso/{Args.Data.CursoID}");
            toastService.ShowSuccess("Curso apagado com sucesso", "Sucesso!");
        }
    }

    public async Task ActionCompleteHandler(ActionEventArgs<Curso> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            cursos = await http.GetFromJsonAsync<List<Curso>>("api/curso");
        }
    }

    public async Task ExcelExport()
    {
        await this.CursosGrid.ExcelExport();
    }

}