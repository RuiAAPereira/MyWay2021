@inject IToastService toastService
@inject HttpClient http
@inject IJSRuntime js

<div class="modal fade" id="funcaoModal" tabindex="-1"
     role="dialog" aria-labelledby="funcaoModal"
     aria-hidden="true" backdrop="static">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="CustomHeader">@CustomHeader</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit">
                <div class="modal-body">
                    <div class="mx-3">
                        <DataAnnotationsValidator />
                        <input type="hidden" @bind-value="@Model.ID" />
                        <div class="form-row">
                            <SfTextBox Placeholder="Nome" @bind-Value="@Model.Nome"
                                       FloatLabelType="@FloatLabelType.Auto" Type="InputType.Text"></SfTextBox>
                            <ValidationMessage For="@(() => Model.Nome)" />
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-success"
                            data-toggle="tooltip" data-placement="top"
                            title="Submeter formulário">
                        <i class="fas fa-save"></i>&nbsp;Gravar
                    </button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">
                        <i class="fas fa-undo"></i>&nbsp;Cancelar
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code{
    [Parameter] public System.Action DataChanged { get; set; }
    [Parameter] public RenderFragment CustomHeader { get; set; }
    [Parameter] public Funcao Model { get; set; }

    private async void HandleValidSubmit()
    {
        if (Model.ID == Guid.Empty)
        {
            await http.PostAsJsonAsync("api/funcao", Model);
            toastService.ShowSuccess("Função adicionada com sucesso", "Sucesso!");
        }
        else
        {
            await http.PutAsJsonAsync("api/funcao", Model);
            toastService.ShowSuccess("Função editada com sucesso", "Sucesso!");
        }

        await CloseModal("funcaoModal");
        DataChanged?.Invoke();
    }

    private async Task CloseModal(string modalId)
    {
        await js.InvokeAsync<object>("global.closeModal", modalId);
    }
}