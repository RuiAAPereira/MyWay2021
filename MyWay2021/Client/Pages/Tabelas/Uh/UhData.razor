@page "/uhs"

@inject IToastService toastService
@inject HttpClient client
@inject IJSRuntime js

<AuthorizeView Context="authContext" Roles="@("Administrador")">
    <Authorized>
        <BreadCrumb breadCrumbs="breadCrumbs"></BreadCrumb>
        <div class="container-fluid">
            <div class="row">
                <div class="col-12 col-md-8 col-lg-6">
                    <SfCard ID="UnidadesdeHandling">
                        <CardHeader Title="Unidades de Handling" />
                        <CardContent>
                            <SpinLoader IsLoading="@(uhs == null)">
                                <LoadingTemplate>
                                    <div class="modal-overlay">
                                        <Chase Color="#ff0000" Size="60px" Center="true" />
                                    </div>
                                </LoadingTemplate>
                                <ContentTemplate>
                                    @if (uhs.Length == 0)
                                    {
                                        <text>Não foram encontrados registos na base de dados</text>
                                    }
                                    else
                                    {
                                        <table class="table table-striped table-bordered table-hover">
                                            <thead class="thead-light">
                                                <tr>
                                                    <th scope="col">Menu</th>
                                                    <th scope="col">Nome</th>
                                                    <th scope="col">IATA</th>
                                                    <th scope="col">Cod.</th>
                                                    <th scope="col">Aeroporto</th>
                                                    @if (@authContext.User.IsInRole("Admins")) //substituir por Admins
                                                    {
                                                        <th scope="col">Criado em:</th>
                                                        <th scope="col">Criado por:</th>
                                                        <th scope="col">Atualizado em:</th>
                                                        <th scope="col">Atualizado por:</th>
                                                    }
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (Uh uh in uhs)
                                                {
                                                <tr>
                                                    <td width="120px" align="center">
                                                        <span class="d-inline-block" tabindex="0" data-toggle="tooltip" data-placement="top"
                                                              title="Editar unidade de handling">
                                                            <button type="button" class="btn btn-info"
                                                                    data-toggle="modal" data-target="#uhModal"
                                                                    @onclick="@(() => PrepareForEdit(uh))">
                                                                <i class="fas fa-edit"></i>
                                                            </button>
                                                        </span>
                                                        <span class="d-inline-block" tabindex="0" data-toggle="tooltip" data-placement="top"
                                                              title="Apagar unidade de handling">
                                                            <button type="button" class="btn btn-danger"
                                                                    data-toggle="modal" data-target="#confirmDeleteModal"
                                                                    @onclick="@(() => PrepareForDelete(uh.ID))">
                                                                <i class="fas fa-trash-alt"></i>
                                                            </button>
                                                        </span>
                                                    </td>
                                                    <td>@uh.Nome</td>
                                                    <td>@uh.IATA</td>
                                                    <td>@uh.CodAeroporto</td>
                                                    <td>@uh.NomeAeroporto</td>
                                                    @if (@authContext.User.IsInRole("Admins")) //substituir por Admins
                                                    {
                                                        <td>@uh.CreatedAt</td>
                                                        <td>@uh.CreatedBy</td>
                                                        <td>@uh.LastUpdatedAt</td>
                                                        <td>@uh.LastUpdatedBy</td>
                                                    }
                                                </tr>
                                                }

                                            </tbody>
                                        </table>
                                    }
                                </ContentTemplate>
                                <FaultedContentTemplate>
                                    <text>ERRO! Por favor contacte o administrador do sistema!</text>
                                </FaultedContentTemplate>
                            </SpinLoader>
                        </CardContent>
                        <CardFooter>
                            <CardFooterContent>
                                <span class="d-inline-block" tabindex="0" data-toggle="tooltip" data-placement="top"
                                      title="Criar nova unidade de handling">
                                    <button type="button" class="btn btn-success"
                                            data-toggle="modal" data-target="#uhModal"
                                            @onclick="@(() => PrepareToAdd())">
                                        <i class="fas fa-plus"></i>&nbsp;Criar
                                    </button>
                                </span>
                            </CardFooterContent>
                        </CardFooter>
                    </SfCard>
                </div>
            </div>
        </div>

        <ConfirmDialog OnClick="@Delete">
            <ConfirmText>
                <p>Deseja de apagar @itemToDelete ?</p>
                <p>Não será possível recuperar este registo!</p>
            </ConfirmText>
        </ConfirmDialog>
        <UhModal Model=Model DataChanged="@DataChanged">
            <CustomHeader>@customHeader</CustomHeader>
        </UhModal>

    </Authorized>
    <NotAuthorized>
        <p>Não está logado.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    public List<BreadCrumbData> breadCrumbs = new List<BreadCrumbData>();

    Uh[] uhs { get; set; }
    Uh Model = new Uh();
    Guid UhToDelete { get; set; }
    string itemToDelete = string.Empty;
    string customHeader = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        BreadCrumbData breadCrumb = new BreadCrumbData
        {
            Text = "Início",
            Url = "/"
        };
        breadCrumbs.Add(breadCrumb);

        breadCrumb = new BreadCrumbData
        {
            Text = "Tabelas",
            Url = "/uhs"
        };
        breadCrumbs.Add(breadCrumb);

        breadCrumb = new BreadCrumbData
        {
            Text = "Uhs",
            Url = "/uhs"
        };
        breadCrumbs.Add(breadCrumb);

        uhs = await client.GetFromJsonAsync<Uh[]>("api/uh");
    }

    private async void DataChanged()
    {
        breadCrumbs.Clear();
        await OnInitializedAsync();
        StateHasChanged();
    }

    private void PrepareToAdd()
    {
        Model = new Uh();
        customHeader = "Adicionar UH";
    }

    private void PrepareForEdit(Uh uh)
    {
        customHeader = "Editar UH";
        Model = uh;
    }

    private void PrepareForDelete(Guid uhId)
    {
        UhToDelete = uhId;
        var uh = uhs.First(x => x.ID == UhToDelete);
        itemToDelete = uh.Nome;
    }

    async Task Delete()
    {
        await client.DeleteAsync($"api/uh/{UhToDelete}");
        await js.InvokeAsync<object>("global.closeModal", "confirmDeleteModal");

        await Task.Delay(100);
        toastService.ShowSuccess("UH apagada com sucesso", "Sucesso!");
        
        breadCrumbs.Clear();
        await OnInitializedAsync();
    }
}