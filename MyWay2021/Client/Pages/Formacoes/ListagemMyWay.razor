@page "/listagemFormacoesMyWay"

@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Grids
@using MyWay2021.Shared.Models.Formacoes

@inject IToastService toastService
@inject HttpClient client
@inject IJSRuntime js

<AuthorizeView Context="authContext" Roles="@("Administrador")">
    <Authorized>
        <BreadCrumb breadCrumbs="breadCrumbs"></BreadCrumb>
        <div class="container-fluid">

            <div class="row">
                <div class="col-12 col-md-12 col-lg-12">
                    <SfCard ID="Funcoes">
                        <CardHeader Title="Assistências" />
                        <CardContent>
                            <SpinLoader IsLoading="@(listaAccoesFormacao == null)">
                                <LoadingTemplate>
                                    <div class="modal-overlay">
                                        <Chase Color="#ff0000" Size="60px" Center="true" />
                                    </div>
                                </LoadingTemplate>
                                <ContentTemplate>
                                    @if (listaAccoesFormacao.Count == 0)
                                    {
                                        <text>Não foram encontrados registos na base de dados</text>
                                    }
                                    else
                                    {
                                        <SfButton OnClick="ExcelExport" IconCss="e-icons e-export_excel" IconPosition="IconPosition.Left" Content="Excel"></SfButton>
                                        <br />
                                        <br />
                                        <SfGrid @ref="DefaultGridLista" TValue="ListagemAccoesMyWay" DataSource="@listaAccoesFormacao"
                                                AllowExcelExport="true" AllowFiltering="true" AllowPaging="true" AllowSorting="true" 
                                                Width="100%" GridLines="GridLine.Both">
                                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                                            <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false"></GridEditSettings>
                                            <GridPageSettings PageSize="25"></GridPageSettings>
                                            <GridEvents QueryCellInfo="CustomizeCell" TValue="ListagemAccoesMyWay"></GridEvents>
                                            <GridColumns>
                                                <GridColumn HeaderText="Formando">
                                                    <GridColumns>
                                                        <GridColumn Field=@nameof(ListagemAccoesMyWay.FormandoID) TextAlign="TextAlign.Right"
                                                                    Visible="false" IsPrimaryKey="true"></GridColumn>
                                                        <GridColumn Field=@nameof(ListagemAccoesMyWay.Formando) HeaderText="Nome"
                                                                    Width="250px"></GridColumn>
                                                        <GridColumn Field=@nameof(ListagemAccoesMyWay.Ativo) HeaderText="Ativo? 
                                                                    "Width="100px"></GridColumn>
                                                        <GridColumn Field=@nameof(ListagemAccoesMyWay.UnidadeHandling) HeaderText="UH" 
                                                                    Width="100px"></GridColumn>
                                                    </GridColumns>
                                                </GridColumn>
                                                <GridColumn HeaderText="Security 13">
                                                    <GridColumns>
                                                        <GridColumn Field=@nameof(ListagemAccoesMyWay.SecurityInit) HeaderText="Data Acção"
                                                                    Format="d" Type="ColumnType.Date" Width="100px"></GridColumn>
                                                        <GridColumn Field=@nameof(ListagemAccoesMyWay.SecurityEnd) HeaderText="Validade"
                                                                    Format="d" Type="ColumnType.Date" Width="100px"></GridColumn>
                                                    </GridColumns>
                                                </GridColumn>
                                                <GridColumn HeaderText="DGR CAT9">
                                                    <GridColumns>
                                                        <GridColumn Field=@nameof(ListagemAccoesMyWay.DGRInit) HeaderText="Data Acção"
                                                                    Format="d" Type="ColumnType.Date" Width="100px"></GridColumn>
                                                        <GridColumn Field=@nameof(ListagemAccoesMyWay.DGREnd) HeaderText="Validade"
                                                                    Format="d" Type="ColumnType.Date" Width="100px"></GridColumn>
                                                    </GridColumns>
                                                </GridColumn>
                                                <GridColumn HeaderText="BPMR">
                                                    <GridColumns>
                                                        <GridColumn Field=@nameof(ListagemAccoesMyWay.BPMRInit) HeaderText="Data Acção"
                                                                    Format="d" Type="ColumnType.Date" Width="100px"></GridColumn>
                                                        <GridColumn Field=@nameof(ListagemAccoesMyWay.BPMREnd) HeaderText="Validade"
                                                                    Format="d" Type="ColumnType.Date" Width="100px"></GridColumn>
                                                    </GridColumns>
                                                </GridColumn>
                                                <GridColumn HeaderText="S&C">
                                                    <GridColumns>
                                                        <GridColumn Field=@nameof(ListagemAccoesMyWay.SCInit) HeaderText="Data Acção"
                                                                    Format="d" Type="ColumnType.Date" Width="100px"></GridColumn>
                                                        <GridColumn Field=@nameof(ListagemAccoesMyWay.SCEnd) HeaderText="Validade"
                                                                    Format="d" Type="ColumnType.Date" Width="100px"></GridColumn>
                                                    </GridColumns>
                                                </GridColumn>
                                                <GridColumn HeaderText="ENB">
                                                    <GridColumns>
                                                        <GridColumn Field=@nameof(ListagemAccoesMyWay.ENBInit) HeaderText="Data Acção"
                                                                    Format="d" Type="ColumnType.Date" Width="100px"></GridColumn>
                                                        <GridColumn Field=@nameof(ListagemAccoesMyWay.ENBEnd) HeaderText="Validade"
                                                                    Format="d" Type="ColumnType.Date" Width="100px"></GridColumn>
                                                    </GridColumns>
                                                </GridColumn>
                                                <GridColumn HeaderText="SMS">
                                                    <GridColumns>
                                                        <GridColumn Field=@nameof(ListagemAccoesMyWay.SMSInit) HeaderText="Data Acção"
                                                                    Format="d" Type="ColumnType.Date" Width="100px"></GridColumn>
                                                        <GridColumn Field=@nameof(ListagemAccoesMyWay.SMSEnd) HeaderText="Validade"
                                                                    Format="d" Type="ColumnType.Date" Width="100px"></GridColumn>
                                                    </GridColumns>
                                                </GridColumn>
                                                <GridColumn HeaderText="SST">
                                                    <GridColumns>
                                                        <GridColumn Field=@nameof(ListagemAccoesMyWay.SSTInit) HeaderText="Data Acção"
                                                                    Format="d" Type="ColumnType.Date" Width="100px"></GridColumn>
                                                        <GridColumn Field=@nameof(ListagemAccoesMyWay.SSTEnd) HeaderText="Validade"
                                                                    Format="d" Type="ColumnType.Date" Width="100px"></GridColumn>
                                                    </GridColumns>
                                                </GridColumn>
                                            </GridColumns>
                                        </SfGrid>
                                    }
                                </ContentTemplate>
                                <FaultedContentTemplate>
                                    <text>ERRO! Por favor contacte o administrador do sistema!</text>
                                </FaultedContentTemplate>
                            </SpinLoader>
                        </CardContent>
                        <CardFooter>
                            <CardFooterContent>
                                <SfButton @onclick="onToggleClick" CssClass="e-flat" IsPrimary="true"></SfButton>
                            </CardFooterContent>
                        </CardFooter>
                    </SfCard>
                </div>
            </div>
        </div>
    </Authorized>
    <Authorizing>
        <h1>Loading ...</h1>
    </Authorizing>
</AuthorizeView>

<style type="text/css" class="cssStyles">
    .e-grid .e-altrow {
        background-color: #fafafa;
    }
    .e-grid .e-rowcell {
        font-size: 12px !important;
    }
    .e-export_excel:before {
        content: '\e74e';
    }
    .caducado {
        background-color: red;
    }

    .tresmeses {
        background-color: lawngreen;
    }

    .ummes {
        background-color: yellow
    }
</style>

@code {
    private SfGrid<ListagemAccoesMyWay> DefaultGridLista;
    public List<BreadCrumbData> breadCrumbs = new List<BreadCrumbData>();
    List<ListagemAccoesMyWay> listaAccoesFormacao { get; set; }

    protected override async Task OnInitializedAsync()
    {
        BreadCrumbData breadCrumb = new BreadCrumbData
        {
            Text = "Início",
            Url = "/"
        };
        breadCrumbs.Add(breadCrumb);

        await FillData();
    }

    public async Task FillData()
    {
        listaAccoesFormacao = await client.GetFromJsonAsync<List<ListagemAccoesMyWay>>("api/accaoFormacao/getListagemMyWay");

        StateHasChanged();
    }

    public async void OnSuccess(SuccessEventArgs args)
    {
        var customHeader = args.Response.Headers.Split(new Char[] { '\n' })[1]; // To split the response header values
        var key = customHeader.Split(new Char[] { ':' })[0]; // To get the key pair of provided custom data in header
        var value = customHeader.Split(new Char[] { ':' })[1].Trim(); // To get the value for the key pair of provided custom data in header

        if (key == "registos")
        {
            await Task.Delay(100);
            toastService.ShowSuccess(value, "Sucesso!");
        }

        await FillData();
    }

    public async Task ExcelExport()
    {
        ExcelExportProperties ExcelProperties = new ExcelExportProperties();
        ExcelProperties.FileName = "ListagemCaducidades.xlsx";
        await this.DefaultGridLista.ExcelExport(ExcelProperties);
    }

    public void CustomizeCell(QueryCellInfoEventArgs<ListagemAccoesMyWay> args)
    {
        if (args.Column.Field == "SecurityEnd")
        {
            if (args.Data.SecurityEnd < DateTime.UtcNow.Date)
            {
                args.Cell.AddClass(new string[] { "caducado" });
            }
            else if (args.Data.SecurityEnd >= DateTime.UtcNow.Date &&
            args.Data.SecurityEnd <= DateTime.UtcNow.AddMonths(1).Date)
            {
                args.Cell.AddClass(new string[] { "ummes" });
            }
            else if (args.Data.SecurityEnd >= DateTime.UtcNow.AddMonths(1).Date &&
            args.Data.SecurityEnd <= DateTime.UtcNow.AddMonths(3).Date)
            {
                args.Cell.AddClass(new string[] { "tresmeses" });
            }
        }
        if (args.Column.Field == "DGREnd")
        {
            if (args.Data.DGREnd < DateTime.UtcNow.Date)
            {
                args.Cell.AddClass(new string[] { "caducado" });
            }
            else if (args.Data.DGREnd >= DateTime.UtcNow.Date &&
            args.Data.DGREnd <= DateTime.UtcNow.AddMonths(1).Date)
            {
                args.Cell.AddClass(new string[] { "ummes" });
            }
            else if (args.Data.DGREnd >= DateTime.UtcNow.AddMonths(1).Date &&
            args.Data.DGREnd <= DateTime.UtcNow.AddMonths(3).Date)
            {
                args.Cell.AddClass(new string[] { "tresmeses" });
            }
        }
        if (args.Column.Field == "BPMREnd")
        {
            if (args.Data.BPMREnd < DateTime.UtcNow.Date)
            {
                args.Cell.AddClass(new string[] { "caducado" });
            }
            else if (args.Data.BPMREnd >= DateTime.UtcNow.Date &&
            args.Data.BPMREnd <= DateTime.UtcNow.AddMonths(1).Date)
            {
                args.Cell.AddClass(new string[] { "ummes" });
            }
            else if (args.Data.BPMREnd >= DateTime.UtcNow.AddMonths(1).Date &&
            args.Data.BPMREnd <= DateTime.UtcNow.AddMonths(3).Date)
            {
                args.Cell.AddClass(new string[] { "tresmeses" });
            }
        }
        if (args.Column.Field == "SCEnd")
        {
            if (args.Data.SCEnd < DateTime.UtcNow.Date)
            {
                args.Cell.AddClass(new string[] { "caducado" });
            }
            else if (args.Data.SCEnd >= DateTime.UtcNow.Date &&
            args.Data.SCEnd <= DateTime.UtcNow.AddMonths(1).Date)
            {
                args.Cell.AddClass(new string[] { "ummes" });
            }
            else if (args.Data.SCEnd >= DateTime.UtcNow.AddMonths(1).Date &&
            args.Data.SCEnd <= DateTime.UtcNow.AddMonths(3).Date)
            {
                args.Cell.AddClass(new string[] { "tresmeses" });
            }
        }
        if (args.Column.Field == "ENBEnd")
        {
            if (args.Data.ENBEnd < DateTime.UtcNow.Date)
            {
                args.Cell.AddClass(new string[] { "caducado" });
            }
            else if (args.Data.ENBEnd >= DateTime.UtcNow.Date &&
            args.Data.ENBEnd <= DateTime.UtcNow.AddMonths(1).Date)
            {
                args.Cell.AddClass(new string[] { "ummes" });
            }
            else if (args.Data.ENBEnd >= DateTime.UtcNow.AddMonths(1).Date &&
            args.Data.ENBEnd <= DateTime.UtcNow.AddMonths(3).Date)
            {
                args.Cell.AddClass(new string[] { "tresmeses" });
            }
        }
        if (args.Column.Field == "SSTEnd")
        {
            if (args.Data.SSTEnd < DateTime.UtcNow.Date)
            {
                args.Cell.AddClass(new string[] { "caducado" });
            }
            else if (args.Data.SSTEnd >= DateTime.UtcNow.Date &&
            args.Data.SSTEnd <= DateTime.UtcNow.AddMonths(1).Date)
            {
                args.Cell.AddClass(new string[] { "ummes" });
            }
            else if (args.Data.SSTEnd >= DateTime.UtcNow.AddMonths(1).Date &&
            args.Data.SSTEnd <= DateTime.UtcNow.AddMonths(3).Date)
            {
                args.Cell.AddClass(new string[] { "tresmeses" });
            }
        }
        if (args.Column.Field == "SMSEnd")
        {
            if (args.Data.SMSEnd < DateTime.UtcNow.Date)
            {
                args.Cell.AddClass(new string[] { "caducado" });
            }
            else if (args.Data.SMSEnd >= DateTime.UtcNow.Date &&
            args.Data.SMSEnd <= DateTime.UtcNow.AddMonths(1).Date)
            {
                args.Cell.AddClass(new string[] { "ummes" });
            }
            else if (args.Data.SMSEnd >= DateTime.UtcNow.AddMonths(1).Date &&
            args.Data.SMSEnd <= DateTime.UtcNow.AddMonths(3).Date)
            {
                args.Cell.AddClass(new string[] { "tresmeses" });
            }
        }
    }

    private void onToggleClick()
    {

    }
}