@page "/uploadFormacoes"

@using MyWay2021.Shared.Models.Colaboradores
@using System.IO
@using System.Globalization
@using OfficeOpenXml
@using System.Data
@using System.Text

@inject HttpClient http

<SfToast ID="toast_error" @ref="ToastError" ShowCloseButton="true" NewestOnTop="true" ShowProgressBar="true">
    <ToastPosition X="Center"></ToastPosition>
</SfToast>
<SfToast ID="toast_ok" @ref="ToastOk" ShowCloseButton="true" NewestOnTop="true" ShowProgressBar="true"
         CssClass="e-toast-success" Icon="e-success toast-icons">
    <ToastPosition X="Center"></ToastPosition>
    <ToastTemplates>
        <Title>
            @ToastTitle
        </Title>
        <Content>
            @((MarkupString)ToastContent)
        </Content>
    </ToastTemplates>
</SfToast>

<AuthorizeView Context="authContext" Roles="@(" Administrador")">
    <Authorized>
        <div class="container-fluid">
            <div class="row">
                <BreadCrumb breadCrumbs="breadCrumbs"></BreadCrumb>
            </div>
            <div class="row">
                <SfSpinner @ref="SpinnerObj" Target="#container"></SfSpinner>

                <div id="container" class="row col-12">
                    <div class="row col-12">
                        <div class="col-md-3 col-sm-3 col-xs-6">
                            <div class="row p-2">
                                <SfDropDownList TValue="Guid" TItem="Uh" Placeholder="Selecionar UH" required CssClass="@Validate">
                                    <SfDataManager Url="api/uh/GetUhOwned" Adaptor="Adaptors.WebApiAdaptor" CrossDomain="true"></SfDataManager>
                                    <DropDownListEvents TValue="Guid" TItem="Uh" ValueChange="@OnChange"></DropDownListEvents>
                                    <DropDownListFieldSettings Text="Nome" Value="ID"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                            <div class="row p-2">
                                <InputFile OnChange="@OnFileSelection" accept=".xls,.xlsx">Escolher ficheiro</InputFile>
                            </div>
                            <div class="row p-2">
                                <SfButton CssClass="e-primary" @onclick="ProcessFile">Processar Ficheiro...</SfButton>
                            </div>
                        </div>
                        <div class="row col-12">
                            <div class="col-md-6 col-sm-6 col-xs-12">
                                @if (maxProgres > 0)
                                {
                                    <div class="row p-2">
                                        <SfProgressBar Type="ProgressType.Linear" Value="@progress" Height="100"
                                                       Minimum="0" Maximum="@maxProgres" ShowProgressValue="true">
                                            <ProgressBarAnimation Enable="true"></ProgressBarAnimation>
                                        </SfProgressBar>
                                    </div>
                                    <div class="row p-2">
                                        <table>
                                            <tr>
                                                <td class="left-side">A processar...</td>
                                                <td>:<span id='text' class="right-side">Total @maxProgres linhas</span></td>
                                            </tr>
                                            <tr>
                                                <td class="left-side">A inserir:</td>
                                                <td>:<span id='text' class="right-side">@inserted</span></td>
                                            </tr>
                                            <tr>
                                                <td class="left-side">A atualizar:</td>
                                                <td>:<span id='text' class="right-side">@updated</span></td>
                                            </tr>
                                        </table>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <Authorizing>
        <h1>Loading ...</h1>
    </Authorizing>
</AuthorizeView>
@code{
    SfSpinner SpinnerObj;
    public List<BreadCrumbData>
    breadCrumbs = new List<BreadCrumbData>
        ();

    SfToast ToastError;
    SfToast ToastOk;

    private string ToastTitle = "";
    private string ToastContent = "";

    private List<ToastModel>
        Toast = new List<ToastModel>
            {
                new ToastModel{ Title = "ERRO!", Content="Por favor selecione um ficheiro.", CssClass="e-toast-danger", Icon="e-error toast-icons" },
                new ToastModel{ Title = "ERRO!", Content="Por favor selecione uma Unidade de handling.", CssClass="e-toast-danger", Icon="e-error toast-icons" },
                new ToastModel{ Title = "ERRO!", Content="os cabeçalhos do ficheiro não coincidem.", CssClass="e-toast-danger", Icon="e-error toast-icons" }
                    };

    int inserted { get; set; } = 0;
    int updated { get; set; } = 0;
    int progress { get; set; }
    int maxProgres { get; set; }

    public List<Uh>
        uhs
    { get; set; }
    public List<Curso>
        cursos
    { get; set; }
    public List<Colaborador>
        colaboradores
    { get; set; }
    public List<FormacaoConcluida>
        acoes
    { get; set; }

    public string[] formacoesFile = new string[] {
                                "Formando","Curso","Acção","Empresa","Nº funcionário", "Departamento", "Categoria",
                                "Função", "Data início acção", "Data fim acção","Nº total de horas da acção","Nº de horas frequentadas pelo formando"
                                };

    string Validate = "e-error";

    bool fileSelected = false;
    IBrowserFile myFile;
    private string textValue { get; set; }

    protected override async Task OnInitializedAsync()
    {

        BreadCrumbData breadCrumb = new BreadCrumbData
        {
            Text = "Início",
            Url = "/"
        };
        breadCrumbs.Add(breadCrumb);

        breadCrumb = new BreadCrumbData
        {
            Text = "Upload Dados de Formações",
            Url = "/uploadFormacoes"
        };
        breadCrumbs.Add(breadCrumb);

        uhs = await http.GetFromJsonAsync<List<Uh>>("api/uh");
    }

    public Guid uhValue { get; set; } = Guid.Empty;

    public void OnChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<Guid, Uh> args)
    {
        if (args.Value == Guid.Empty)
        {
            this.Validate = "e-error";
        }
        else
        {
            this.Validate = "e-success";
        }

        this.uhValue = args.ItemData.ID;
    }

    string myFileName = string.Empty;

    private async Task OnFileSelection(InputFileChangeEventArgs e)
    {
        myFile = e.File;
        var buffers = new byte[myFile.Size];
        await myFile.OpenReadStream(50000000).ReadAsync(buffers);
        string fileType = myFile.ContentType;
        if (myFile.Size > 0)
        {
            fileSelected = true;
        }
    }

    private async void ProcessFile()
    {
        bool uhSelected = (uhValue != Guid.Empty ? true : false);
        if (!fileSelected || !uhSelected)
        {
            if (!fileSelected)
            {
                await this.ToastError.Show(Toast[0]);
            }
            if (!uhSelected)
            {
                await this.ToastError.Show(Toast[1]);
            }
            return;
        }
        else
        {

            var hasHeader = true;
            MemoryStream ms = new MemoryStream();
            await myFile.OpenReadStream(50000000).CopyToAsync(ms);
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

            using ExcelPackage package = new ExcelPackage();
            package.Load(ms);

            //Lets Deal with first worksheet.(You may iterate here if dealing with multiple sheets)
            var ws = package.Workbook.Worksheets[0];

            //Get all details as DataTable -because Datatable make life easy :)
            DataTable excelasTable = new DataTable();
            foreach (var firstRowCell in ws.Cells[1, 1, 1, ws.Dimension.End.Column])
            {
                //Get colummn details
                if (!string.IsNullOrEmpty(firstRowCell.Text))
                {
                    string firstColumn = string.Format("Column {0}", firstRowCell.Start.Column);
                    excelasTable.Columns.Add(hasHeader ? firstRowCell.Text : firstColumn);
                }
            }
            var startRow = hasHeader ? 2 : 1;
            //Get row details
            for (int rowNum = startRow; rowNum <= ws.Dimension.End.Row; rowNum++)
            {
                var wsRow = ws.Cells[rowNum, 1, rowNum, excelasTable.Columns.Count];
                DataRow row = excelasTable.Rows.Add();
                foreach (var cell in wsRow)
                {
                    row[cell.Start.Column - 1] = cell.Text;
                }
            }

            string[] columnNames = excelasTable.Columns.Cast<DataColumn>()
                                     .Select(x => x.ColumnName)
                                     .ToArray();

            Array.ForEach(columnNames, Console.WriteLine);

            maxProgres = excelasTable.Rows.Count;

            if (columnNames.SequenceEqual(formacoesFile))
            {
                Console.WriteLine("Ficheiro de formações");
                cursos = await http.GetFromJsonAsync<List<Curso>>("api/curso");
                acoes = await http.GetFromJsonAsync<List<FormacaoConcluida>>("api/formacaoConcluida");
                colaboradores = await http.GetFromJsonAsync<List<Colaborador>>("api/colaborador");

                int i = 0;

                foreach (DataRow row in excelasTable.Rows)
                {
                    Console.WriteLine(" ");
                    string formando = RemoveDiacritics(row["Formando"].ToString());
                    Console.WriteLine(formando);
                    string curso = row["Curso"].ToString();
                    Console.WriteLine(curso);
                    string numPw = row["Nº funcionário"].ToString().Trim();
                    Console.WriteLine(numPw);
                    string dep = row["Departamento"].ToString();
                    Console.WriteLine(dep);
                    string cat = row["Categoria"].ToString();
                    Console.WriteLine(cat);
                    string func = row["Função"].ToString();
                    Console.WriteLine(func);
                    DateTime dataInicio = CsToDateTime(row["Data início acção"].ToString());
                    Console.WriteLine(dataInicio);
                    DateTime dataFim = CsToDateTime(row["Data fim acção"].ToString());
                    Console.WriteLine(dataFim);
                    //int totalH = int.Parse(row["Nº total de horas da acção"].ToString());
                    //Console.WriteLine(totalH);
                    //double numH = double.Parse(row["Nº de horas frequentadas pelo formando"].ToString());
                    //Console.WriteLine(numH);

                    Guid colaboradorID = colaboradores.Where(n => RemoveDiacritics(n.Nome) == formando).Select(i => i.ColaboradorID).FirstOrDefault();
                    Console.WriteLine(colaboradorID);
                    Guid cursoID = cursos.Where(n => n.Designacao == curso).Select(i => i.CursoID).FirstOrDefault();

                    Console.WriteLine("a processar linha " + i++);

                    if (colaboradorID != Guid.Empty && cursoID != Guid.Empty)
                    {
                        FormacaoConcluida current = new()
                        {
                            ColaboradorID = colaboradorID,
                            CursoID = cursoID,
                            DataAcao = dataInicio,
                            DataFimAcao = dataFim,
                            DataValidade = dataFim.AddYears(3)
                        };

                        FormacaoConcluida exists = acoes.Where(d =>
                            d.ColaboradorID == current.ColaboradorID &&
                            d.CursoID == current.CursoID &&
                            d.DataAcao == current.DataFimAcao &&
                            d.DataFimAcao == current.DataValidade
                        ).FirstOrDefault();

                        if (exists != null)
                        {
                            current.FCID = exists.FCID;
                            //await http.PutAsJsonAsync("api/formacoesConcluidas", current);
                            updated += 1;
                            progress += 1;
                            Console.WriteLine("existem " + updated + " duplicados");
                            base.StateHasChanged();
                        }
                        else
                        {
                            //await http.PostAsJsonAsync("api/formacoesConcluidas", current);
                            inserted += 1;
                            progress += 1;
                            Console.WriteLine("foram inseridas " + inserted + " linhas");
                            base.StateHasChanged();
                        }
                    }

                }

                this.ToastTitle = "SUCESSO!";
                this.ToastContent = "<h3>Ficheiro de histórico processado com sucesso!</h3>" +
                    "<br /> Foram adicionados " + inserted + " registos!" +
                    "<br /> Foram atualizadas " + updated + " entradas!";
                await Task.Delay(1000);
                await this.ToastOk.Show();
                inserted = 0;
                updated = 0;
                progress = 0;
                maxProgres = 0;
                base.StateHasChanged();
            }
            else
            {
                Console.WriteLine("os cabeçalhos do ficheiro não coincidem");

                await this.ToastError.Show(Toast[2]);

                return;
            }
            this.StateHasChanged();
        }

    }

    private Guid colaboradorID(string nome)
    {
        var id = colaboradores.Where(n => n.Nome.Trim() == nome).Select(i => i.ColaboradorID).FirstOrDefault();
        return id;
    }

    private string RemoveDiacritics(string text)
    {
        StringBuilder sbReturn = new StringBuilder();
        var arrayText = text.Normalize(NormalizationForm.FormD).ToCharArray();
        foreach (char letter in arrayText)
        {
            if (CharUnicodeInfo.GetUnicodeCategory(letter) != UnicodeCategory.NonSpacingMark)
                sbReturn.Append(letter);
        }
        return sbReturn.ToString().Trim().ToLower();
    }

    private DateTime CsToDateTime(string str)
    {
        string[] dateFormats = new[]
            {
                "d/M/yyyy HH:mm:ss tt",
                "M/d/yyyy HH:mm:ss tt",
                "dd/MM/yyyy HH:mm:ss",
                "dd-MM-yyyy HH:mm:ss"
            };

        DateTime dateTime;

        if (DateTime.TryParseExact(str, dateFormats, CultureInfo.InvariantCulture, DateTimeStyles.None, out dateTime))
        {
            return dateTime;
        }
        else
        {
            dateTime = DateTime.Parse("01-01-1900 00:00:00", CultureInfo.InvariantCulture);
            return dateTime;
        }
    }

}